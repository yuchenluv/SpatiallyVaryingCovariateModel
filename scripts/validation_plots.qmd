---
title: "Validations"
jupyter: julia-1.9
execute:
  cache: true
---

Mainly plot for cross-validation results

# Setup

Load in packages

```{julia}
#| code-fold: true
using CairoMakie
using CSV
using DataFrames
using Distributions
using DrWatson
using GeoJSON
using GeoMakie
using HTTP
using Plots;
```

load commonly used functions

```{julia}
include("util.jl")
include("plot_util.jl");
```

# Load data

```{julia}
# all the raw data, including years, prcp and covariates
raw_data_all = DataFrame(CSV.File(datadir("processed/raw_1d/GHCN_daily_30y.csv")))

years = raw_data_all[:, 1]

# CO2 climate covariate
lnCO2 = DataFrame(CSV.File(datadir("processed/raw_1d/lnCO2.csv")))
lnCO2 = vcat(lnCO2[:, :log_CO2], log(525))
log_CO2 = lnCO2 .- mean(lnCO2[1:(length(lnCO2)-1)])
log_CO2_2022 = log_CO2[length(log_CO2)-1]
log_CO2_1940 = log_CO2[52]
log_CO2_2005 = log_CO2[117]

# raw precipiation intensity
# missing values as negative
# raw_data_all = coalesce.(raw_data_all, -99)
raw_prcp = raw_data_all[:, 2:size(raw_data_all)[2]-1]

# stations
raw_stations = DataFrame(CSV.File(datadir("processed/raw_1d/GHCN_stations_30y.csv")))

# total number of stations
n_stations = size(raw_stations)[1];
```

Some general variables

```{julia}
# number of MCMC simulations
n_sim = 10000
```

# spatially cross-validation for the full model

## map of number of observations for each subset

```{julia}
sub1_index = DataFrame(CSV.File(datadir("processed/1d_results/sub1_index.csv")))[:, 1]
sub2_index = DataFrame(CSV.File(datadir("processed/1d_results/sub2_index.csv")))[:, 1]
sub3_index = DataFrame(CSV.File(datadir("processed/1d_results/sub3_index.csv")))[:, 1]
sub4_index = DataFrame(CSV.File(datadir("processed/1d_results/sub4_index.csv")))[:, 1]
sub5_index = DataFrame(CSV.File(datadir("processed/1d_results/sub5_index.csv")))[:, 1];
```

```{julia}
# get the number of observations for each station
obs_counts = [count(!ismissing, raw_prcp[!, col]) for col in names(raw_prcp)]
raw_stations.n_obs = obs_counts
```

```{julia}
coords_subsets = [raw_stations, raw_stations[sub1_index, :], raw_stations[sub2_index, :], raw_stations[sub3_index, :], raw_stations[sub4_index, :], raw_stations[sub5_index, :]]
obs_dfs = [obs_counts, obs_counts[sub1_index], obs_counts[sub2_index], obs_counts[sub3_index], obs_counts[sub4_index], obs_counts[sub5_index]]

rows = [1, 1, 2, 2, 3, 3]
cols = [1, 2, 1, 2, 1, 2]
res = (2000, 1000)
row_hs = [400, 375, 375]
row_names = ["", "", "", "", "", ""]
title_names = ["all stations", "subset1", "subset2", "subset3", "subset4", "subset5"]
bar_names = ["", "observed years", "", "observed years", "", "observed years"]
ranges = fill((30, 120), 6)
p_n_obs_subs = map_points_subplots(coords_subsets, obs_dfs, :matter, rows, cols, row_names, res, row_hs, title_names, ranges; diff_coord = true, bar_all = false, diff_colscheme = false, bar_name = bar_names)
# save(plotsdir("1d/raw_data_nobs_subs.png"), p_n_obs_subs)
```

## Read in MCMC results

```{julia}
mu_rho, mu_alpha, logs_rho, logs_alpha, mu0_rho, mu0_alpha, logs0_rho, logs0_alpha, xi_all, μ_beta_all, logσ_beta_all, μ0_all, logσ0_all = read_MCMC_results_full_diffRho("processed/1d_results/model_full_all_4rho.csv", n_stations)

# using different parameter settings
# rho_all, alpha_all, mu_w_all, logs_w_all, μ0_w_all, logσ0_w_all, xi_all, μ_beta_all, logσ_beta_all, μ0_all, logσ0_all = read_MCMC_results_full_shareRho1("processed/1d_results/model_full_posterior_all_1rho.csv", n_stations)

# mu_rho, mu_alpha, logs_rho, logs_alpha, mu_w, mu0_w, logs_w, logs0_w, xi_all, μ_beta_all, logσ_beta_all, μ0_all, logσ0_all = read_MCMC_results_full_shareRho2("processed/1d_results/model_full_posterior_all_2rho.csv", n_stations)
```

Cross-validation of different station subsets

```{julia}
mu_rho_sub1, mu_alpha_sub1, logs_rho_sub1, logs_alpha_sub1, mu0_rho_sub1, mu0_alpha_sub1, logs0_rho_sub1, logs0_alpha_sub1, xi_sub1, μ_beta_sub1, logσ_beta_sub1, μ0_sub1, logσ0_sub1 = read_MCMC_results_full_diffRho("processed/1d_results/model_full_grids1.csv", length(sub1_index))

mu_rho_sub2, mu_alpha_sub2, logs_rho_sub2, logs_alpha_sub2, mu0_rho_sub2, mu0_alpha_sub2, logs0_rho_sub2, logs0_alpha_sub2, xi_sub2, μ_beta_sub2, logσ_beta_sub2, μ0_sub2, logσ0_sub2 = read_MCMC_results_full_diffRho("processed/1d_results/model_full_grids2.csv", length(sub2_index))

mu_rho_sub3, mu_alpha_sub3, logs_rho_sub3, logs_alpha_sub3, mu0_rho_sub3, mu0_alpha_sub3, logs0_rho_sub3, logs0_alpha_sub3, xi_sub3, μ_beta_sub3, logσ_beta_sub3, μ0_sub3, logσ0_sub3 = read_MCMC_results_full_diffRho("processed/1d_results/model_full_grids3.csv", length(sub3_index))

mu_rho_sub4, mu_alpha_sub4, logs_rho_sub4, logs_alpha_sub4, mu0_rho_sub4, mu0_alpha_sub4, logs0_rho_sub4, logs0_alpha_sub4, xi_sub4, μ_beta_sub4, logσ_beta_sub4, μ0_sub4, logσ0_sub4 = read_MCMC_results_full_diffRho("processed/1d_results/model_full_grids4.csv", length(sub4_index))

mu_rho_sub5, mu_alpha_sub5, logs_rho_sub5, logs_alpha_sub5, mu0_rho_sub5, mu0_alpha_sub5, logs0_rho_sub5, logs0_alpha_sub5, xi_sub5, μ_beta_sub5, logσ_beta_sub5, μ0_sub5, logσ0_sub5 = read_MCMC_results_full_diffRho("processed/1d_results/model_full_grids5.csv", length(sub5_index))
```

Cross-validation of different station subsets and without data in year 2000-2010

```{julia}
mu_rho_t1s1, mu_alpha_t1s1, logs_rho_t1s1, logs_alpha_t1s1, mu0_rho_t1s1, mu0_alpha_t1s1, logs0_rho_t1s1, logs0_alpha_t1s1, xi_t1s1, μ_beta_t1s1, logσ_beta_t1s1, μ0_t1s1, logσ0_t1s1 = read_MCMC_results_full_diffRho("processed/1d_results/model_full_s1t1.csv", length(sub1_index))

mu_rho_t1s2, mu_alpha_t1s2, logs_rho_t1s2, logs_alpha_t1s2, mu0_rho_t1s2, mu0_alpha_t1s2, logs0_rho_t1s2, logs0_alpha_t1s2, xi_t1s2, μ_beta_t1s2, logσ_beta_t1s2, μ0_t1s2, logσ0_t1s2 = read_MCMC_results_full_diffRho("processed/1d_results/model_full_s2t1.csv", length(sub2_index))

mu_rho_t1s3, mu_alpha_t1s3, logs_rho_t1s3, logs_alpha_t1s3, mu0_rho_t1s3, mu0_alpha_t1s3, logs0_rho_t1s3, logs0_alpha_t1s3, xi_t1s3, μ_beta_t1s3, logσ_beta_t1s3, μ0_t1s3, logσ0_t1s3 = read_MCMC_results_full_diffRho("processed/1d_results/model_full_s3t1.csv", length(sub3_index))

mu_rho_t1s4, mu_alpha_t1s4, logs_rho_t1s4, logs_alpha_t1s4, mu0_rho_t1s4, mu0_alpha_t1s4, logs0_rho_t1s4, logs0_alpha_t1s4, xi_t1s4, μ_beta_t1s4, logσ_beta_t1s4, μ0_t1s4, logσ0_t1s4 = read_MCMC_results_full_diffRho("processed/1d_results/model_full_s4t1.csv", length(sub4_index))

mu_rho_t1s5, mu_alpha_t1s5, logs_rho_t1s5, logs_alpha_t1s5, mu0_rho_t1s5, mu0_alpha_t1s5, logs0_rho_t1s5, logs0_alpha_t1s5, xi_t1s5, μ_beta_t1s5, logσ_beta_t1s5, μ0_t1s5, logσ0_t1s5 = read_MCMC_results_full_diffRho("processed/1d_results/model_full_s5t1.csv", length(sub5_index))
```

### Out of sample predictability (need a concise code)

```{julia}
# to select out of sample stations
# lats_grids = [maximum(raw_stations.lat), 30.5, 30, 29.5, 29, minimum(raw_stations.lat)]
# lons_grids = [minimum(raw_stations.lon), -94.9, -92.8, -90.7, -88.6, maximum(raw_stations.lon)]
# raw_stations_draft = raw_stations
# raw_stations_draft.row_number = 1:nrow(raw_stations_draft)
# s_selected = raw_stations_draft[(lons_grids[5] .< raw_stations_draft.lon .< lons_grids[6]) .& (lats_grids[3] .< raw_stations_draft.lat .< lats_grids[2]), :]
# [s_selected.row_number]

OFS_s1 = [99, 21, 7, 29]
OFS_s2 = [22, 10, 50, 93]
OFS_s3 = [13, 8, 88]
OFS_s4 = [9, 2, 94, 166]
OFS_s5 = [1, 90, 33, 161]
```

Results when using all data

```{julia}
gev_all1 = hcat([get_gev.(log_CO2_2022, μ0_all[:, s], μ_beta_all[:, s], logσ0_all[:, s], logσ_beta_all[:, s], xi_all) for s in OFS_s1]...)
gev_all2 = hcat([get_gev.(log_CO2_2022, μ0_all[:, s], μ_beta_all[:, s], logσ0_all[:, s], logσ_beta_all[:, s], xi_all) for s in OFS_s2]...)
gev_all3 = hcat([get_gev.(log_CO2_2022, μ0_all[:, s], μ_beta_all[:, s], logσ0_all[:, s], logσ_beta_all[:, s], xi_all) for s in OFS_s3]...)
gev_all4 = hcat([get_gev.(log_CO2_2022, μ0_all[:, s], μ_beta_all[:, s], logσ0_all[:, s], logσ_beta_all[:, s], xi_all) for s in OFS_s4]...)
gev_all5 = hcat([get_gev.(log_CO2_2022, μ0_all[:, s], μ_beta_all[:, s], logσ0_all[:, s], logσ_beta_all[:, s], xi_all) for s in OFS_s5]...)
```

For station subsets

```{julia}
# in the function, i is the simluation number (in total n_sim)
gev_dist_new(i, x, lons_new, lats_new, x_old, mu_rho, mu_alpha, logs_rho, logs_alpha, mu0_rho, mu0_alpha, logs0_rho, logs0_alpha, xi, mu_beta, logs_beta, mu0, logs0) = GP_dist(mu_rho[i], mu_alpha[i], logs_rho[i], logs_alpha[i], mu0_rho[i], mu0_alpha[i], logs0_rho[i], logs0_alpha[i], xi[i], collect(mu_beta[i, :]), collect(logs_beta[i, :]), collect(mu0[i, :]), collect(logs0[i, :]), x_old, lons_new, lats_new, x)

x_old_sub1 = Matrix(raw_stations[sub1_index, 2:3])'
gev_sub1 = hcat([[gev_dist_new(i, log_CO2_2022, raw_stations[s, :].lon, raw_stations[s, :].lat, x_old_sub1, mu_rho_sub1, mu_alpha_sub1, logs_rho_sub1, logs_alpha_sub1, mu0_rho_sub1, mu0_alpha_sub1, logs0_rho_sub1, logs0_alpha_sub1, xi_sub1, μ_beta_sub1, logσ_beta_sub1, μ0_sub1, logσ0_sub1) for i = 1:n_sim] for s in OFS_s1]...)

x_old_sub2 = Matrix(raw_stations[sub2_index, 2:3])'
gev_sub2 = hcat([[gev_dist_new(i, log_CO2_2022, raw_stations[s, :].lon, raw_stations[s, :].lat, x_old_sub2, mu_rho_sub2, mu_alpha_sub2, logs_rho_sub2, logs_alpha_sub2, mu0_rho_sub2, mu0_alpha_sub2, logs0_rho_sub2, logs0_alpha_sub2, xi_sub2, μ_beta_sub2, logσ_beta_sub2, μ0_sub2, logσ0_sub2) for i = 1:n_sim] for s in OFS_s2]...)

x_old_sub3 = Matrix(raw_stations[sub3_index, 2:3])'
gev_sub3 = hcat([[gev_dist_new(i, log_CO2_2022, raw_stations[s, :].lon, raw_stations[s, :].lat, x_old_sub3, mu_rho_sub3, mu_alpha_sub3, logs_rho_sub3, logs_alpha_sub3, mu0_rho_sub3, mu0_alpha_sub3, logs0_rho_sub3, logs0_alpha_sub3, xi_sub3, μ_beta_sub3, logσ_beta_sub3, μ0_sub3, logσ0_sub3) for i = 1:n_sim] for s in OFS_s3]...)

x_old_sub4 = Matrix(raw_stations[sub4_index, 2:3])'
gev_sub4 = hcat([[gev_dist_new(i, log_CO2_2022, raw_stations[s, :].lon, raw_stations[s, :].lat, x_old_sub4, mu_rho_sub4, mu_alpha_sub4, logs_rho_sub4, logs_alpha_sub4, mu0_rho_sub4, mu0_alpha_sub4, logs0_rho_sub4, logs0_alpha_sub4, xi_sub4, μ_beta_sub4, logσ_beta_sub4, μ0_sub4, logσ0_sub4) for i = 1:n_sim] for s in OFS_s4]...)

x_old_sub5 = Matrix(raw_stations[sub5_index, 2:3])'
gev_sub5 = hcat([[gev_dist_new(i, log_CO2_2022, raw_stations[s, :].lon, raw_stations[s, :].lat, x_old_sub5, mu_rho_sub5, mu_alpha_sub5, logs_rho_sub5, logs_alpha_sub5, mu0_rho_sub5, mu0_alpha_sub5, logs0_rho_sub5, logs0_alpha_sub5, xi_sub5, μ_beta_sub5, logσ_beta_sub5, μ0_sub5, logσ0_sub5) for i = 1:n_sim] for s in OFS_s5]...)
```

subsetting stations and excluding 2000-2010

```{julia}
# in the function, i is the simluation number (in total n_sim)
gev_dist_new(i, x, lons_new, lats_new, x_old, mu_rho, mu_alpha, logs_rho, logs_alpha, mu0_rho, mu0_alpha, logs0_rho, logs0_alpha, xi, mu_beta, logs_beta, mu0, logs0) = GP_dist(mu_rho[i], mu_alpha[i], logs_rho[i], logs_alpha[i], mu0_rho[i], mu0_alpha[i], logs0_rho[i], logs0_alpha[i], xi[i], collect(mu_beta[i, :]), collect(logs_beta[i, :]), collect(mu0[i, :]), collect(logs0[i, :]), x_old, lons_new, lats_new, x)

x_old_sub1 = Matrix(raw_stations[sub1_index, 2:3])'
gev_t1s1 = hcat([[gev_dist_new(i, log_CO2_2022, raw_stations[s, :].lon, raw_stations[s, :].lat, x_old_sub1, mu_rho_t1s1, mu_alpha_t1s1, logs_rho_t1s1, logs_alpha_t1s1, mu0_rho_t1s1, mu0_alpha_t1s1, logs0_rho_t1s1, logs0_alpha_t1s1, xi_t1s1, μ_beta_t1s1, logσ_beta_t1s1, μ0_t1s1, logσ0_t1s1) for i = 1:n_sim] for s in OFS_s1]...)

x_old_sub2 = Matrix(raw_stations[sub2_index, 2:3])'
gev_t1s2 = hcat([[gev_dist_new(i, log_CO2_2022, raw_stations[s, :].lon, raw_stations[s, :].lat, x_old_sub2, mu_rho_t1s2, mu_alpha_t1s2, logs_rho_t1s2, logs_alpha_t1s2, mu0_rho_t1s2, mu0_alpha_t1s2, logs0_rho_t1s2, logs0_alpha_t1s2, xi_t1s2, μ_beta_t1s2, logσ_beta_t1s2, μ0_t1s2, logσ0_t1s2) for i = 1:n_sim] for s in OFS_s2]...)

x_old_sub3 = Matrix(raw_stations[sub3_index, 2:3])'
gev_t1s3 = hcat([[gev_dist_new(i, log_CO2_2022, raw_stations[s, :].lon, raw_stations[s, :].lat, x_old_sub3, mu_rho_t1s3, mu_alpha_t1s3, logs_rho_t1s3, logs_alpha_t1s3, mu0_rho_t1s3, mu0_alpha_t1s3, logs0_rho_t1s3, logs0_alpha_t1s3, xi_t1s3, μ_beta_t1s3, logσ_beta_t1s3, μ0_t1s3, logσ0_t1s3) for i = 1:n_sim] for s in OFS_s3]...)

x_old_sub4 = Matrix(raw_stations[sub4_index, 2:3])'
gev_t1s4 = hcat([[gev_dist_new(i, log_CO2_2022, raw_stations[s, :].lon, raw_stations[s, :].lat, x_old_sub4, mu_rho_t1s4, mu_alpha_t1s4, logs_rho_t1s4, logs_alpha_t1s4, mu0_rho_t1s4, mu0_alpha_t1s4, logs0_rho_t1s4, logs0_alpha_t1s4, xi_t1s4, μ_beta_t1s4, logσ_beta_t1s4, μ0_t1s4, logσ0_t1s4) for i = 1:n_sim] for s in OFS_s4]...)

x_old_sub5 = Matrix(raw_stations[sub5_index, 2:3])'
gev_t1s5 = hcat([[gev_dist_new(i, log_CO2_2022, raw_stations[s, :].lon, raw_stations[s, :].lat, x_old_sub5, mu_rho_t1s5, mu_alpha_t1s5, logs_rho_t1s5, logs_alpha_t1s5, mu0_rho_t1s5, mu0_alpha_t1s5, logs0_rho_t1s5, logs0_alpha_t1s5, xi_t1s5, μ_beta_t1s5, logσ_beta_t1s5, μ0_t1s5, logσ0_t1s5) for i = 1:n_sim] for s in OFS_s5]...)
```

```{julia}
function rl_boxplot_data(i_s, i_m, dists, n_sim, p)
    # i_s: station index
    # i_m: model index
    # dists: estimated gev distributions
    # n_sim: number of total simulations
    rl_boxplot = rand(n_sim, 3)
    rl_boxplot[:, 1] = quantile.(dists, p)
    rl_boxplot[:, 2] .= i_s
    rl_boxplot[:, 3] .= i_m
    return rl_boxplot
end

rl_boxplot_data_sub1 = vcat([rl_boxplot_data(i, 2, vcat(gev_sub1[:, i]...), 10000, 0.99) for i in 1:length(OFS_s1)]...)
rl_boxplot_data_1 = vcat([rl_boxplot_data(i, 1, gev_all1[:, i], 10000, 0.99) for i in 1:length(OFS_s1)]...)
rl_boxplot_data_t1s1 = vcat([rl_boxplot_data(i, 3, vcat(gev_t1s1[:, i]...), 10000, 0.99) for i in 1:length(OFS_s1)]...)

rl_boxplot_data_sub2 = vcat([rl_boxplot_data(i+length(OFS_s1), 2, vcat(gev_sub2[:, i]...), 10000, 0.99) for i in 1:length(OFS_s2)]...)
rl_boxplot_data_2 = vcat([rl_boxplot_data(i+length(OFS_s1), 1, gev_all2[:, i], 10000, 0.99) for i in 1:length(OFS_s2)]...)
rl_boxplot_data_t1s2 = vcat([rl_boxplot_data(i+length(OFS_s1), 3, vcat(gev_t1s2[:, i]...), 10000, 0.99) for i in 1:length(OFS_s2)]...)

rl_boxplot_data_sub3 = vcat([rl_boxplot_data(i+length(OFS_s1)+length(OFS_s2), 2, vcat(gev_sub1[:, i]...), 10000, 0.99) for i in 1:length(OFS_s3)]...)
rl_boxplot_data_3 = vcat([rl_boxplot_data(i+length(OFS_s1)+length(OFS_s2), 1, gev_all1[:, i], 10000, 0.99) for i in 1:length(OFS_s3)]...)
rl_boxplot_data_t1s3 = vcat([rl_boxplot_data(i+length(OFS_s1)+length(OFS_s2), 3, vcat(gev_t1s3[:, i]...), 10000, 0.99) for i in 1:length(OFS_s3)]...)

rl_boxplot_data_sub4 = vcat([rl_boxplot_data(i+length(OFS_s1)+length(OFS_s2)+length(OFS_s3), 2, vcat(gev_sub1[:, i]...), 10000, 0.99) for i in 1:length(OFS_s4)]...)
rl_boxplot_data_4 = vcat([rl_boxplot_data(i+length(OFS_s1)+length(OFS_s2)+length(OFS_s3), 1, gev_all1[:, i], 10000, 0.99) for i in 1:length(OFS_s4)]...)
rl_boxplot_data_t1s4 = vcat([rl_boxplot_data(i+length(OFS_s1)+length(OFS_s2)+length(OFS_s3), 3, vcat(gev_t1s4[:, i]...), 10000, 0.99) for i in 1:length(OFS_s4)]...)

rl_boxplot_data_sub5 = vcat([rl_boxplot_data(i+length(OFS_s1)+length(OFS_s2)+length(OFS_s3)+length(OFS_s4), 2, vcat(gev_sub1[:, i]...), 10000, 0.99) for i in 1:length(OFS_s5)]...)
rl_boxplot_data_5 = vcat([rl_boxplot_data(i+length(OFS_s1)+length(OFS_s2)+length(OFS_s3)+length(OFS_s4), 1, gev_all1[:, i], 10000, 0.99) for i in 1:length(OFS_s5)]...)
rl_boxplot_data_t1s5 = vcat([rl_boxplot_data(i+length(OFS_s1)+length(OFS_s2)+length(OFS_s3)+length(OFS_s4), 3, vcat(gev_t1s5[:, i]...), 10000, 0.99) for i in 1:length(OFS_s5)]...)
```

```{julia}
rl_boxplot_data_all = vcat(rl_boxplot_data_sub1, rl_boxplot_data_1, rl_boxplot_data_t1s1, rl_boxplot_data_sub2, rl_boxplot_data_2, rl_boxplot_data_t1s2, rl_boxplot_data_sub3, rl_boxplot_data_3, rl_boxplot_data_t1s3, rl_boxplot_data_sub4, rl_boxplot_data_4, rl_boxplot_data_t1s4, rl_boxplot_data_sub5, rl_boxplot_data_5, rl_boxplot_data_t1s5)
```

```{julia}
# learned from https://discourse.julialang.org/t/coloring-boxplot-groups-in-makie/62505
using AlgebraOfGraphics
label_dict = Dict(1.0 => "data1", 2.0 => "data2", 3.0 => "data3")
model_info = [label_dict[value] for value in rl_boxplot_data_all[:, 3]]

df = (stations = rl_boxplot_data_all[:, 2], precipitation = rl_boxplot_data_all[:, 1], model = model_info)
plt = data(df) * mapping(:stations, :precipitation, color = :model => nonnumeric, dodge = :model => nonnumeric) * visual(BoxPlot);
draw(plt)
```
```{julia}
fig = Figure(resolution = (1200, 500))

p_boxplot = Axis(fig[1, 1];
                 xlabel = "Stations",
                 ylabel = "100 year return level estimates in 2022")

CairoMakie.boxplot!(
    p_boxplot,
    round.(Int, rl_boxplot_data_all[:, 2]),
    rl_boxplot_data_all[:, 1],
    dodge = round.(Int, rl_boxplot_data_all[:, 3]),
    show_notch = true,
    color = round.(Int, rl_boxplot_data_all[:, 3]),
)

# Add custom legend
annotate!(
    p_boxplot, 
    [(0, 0, CairoMakie.text("Legend Item 1", halign = :left)),
     (0, 0, CairoMakie.text("Legend Item 2", halign = :left)),
     (0, 0, CairoMakie.text("Legend Item 3", halign = :left))]
)

fig
```

## Quantiles

```{julia}
raw_data_prcp = raw_data_all[:, 2:size(raw_data_all)[2]-1][:, sub1_index]
# raw_data_prcp[1:111, :] .= missing
# raw_data_prcp[123:134, :] .= missing
raw_data_prcp[112:122, :] .= missing
non_missing_count = [count(!ismissing, col) for col in eachcol(raw_data_prcp)]
total_records = sum(non_missing_count)
k = sim_quantiles(raw_data_prcp, μ_beta_sub1, logσ_beta_sub1, μ0_sub1, logσ0_sub1, xi_sub1, log_CO2, total_records)
quantile_sub1_outofsample = Plots.histogram(vec(k), bins=30, legend=false, xlabel="", ylabel="frequency", normalize=:pdf, fill=true, color=:grey, fillalpha=0.8, title="sub1 out of sample")
hline!([1], color=:blue, linewidth=3)
annotate!([0.95], [0.95], Plots.text("ideal", :right, 15, :blue))
# save(plotsdir("1d/quantile_sub1_outofsample.png"), quantile_sub1_outofsample)
```
