---
title: "Generate input data"
jupyter: julia-1.9
execute:
  cache: true
---

This script gets the GHCN-d AMS and covariate (CO2) data as input to the stan models

```{julia}
#| code-fold: true
using CategoricalArrays: categorical
using CSV
using DataFrames
using DataFramesMeta
using Dates
using DrWatson
using GHCNData
using HTTP
using ProgressMeter
using StatsBase;
```

```{julia}
#| code-fold: true
include(scriptsdir("params.jl")) # defines the parameters
include(scriptsdir("get_data.jl")); # functions to get the data
```

```{julia}
all_stations = get_station_inventory(PARAMS)
annmax_precip = get_annmax_precip(PARAMS)
CO2 = get_CO2(PARAMS)
dataset = innerjoin(annmax_precip, CO2, on=:year)
lnCO2 = dataset[!, [:year, :log_CO2]]
dataset[!, :log_CO2] = dataset[!, :log_CO2] .- mean(dataset[!, :log_CO2])
```

Save data to csv so can be used in r

```{julia}
# CSV.write(datadir("processed/raw_1d/GHCN_daily_30y.csv"), dataset)
# stations_valid = names(annmax_precip)[2:end]
# stations_inventory_valid = all_stations[in(stations_valid).(all_stations.stnid), :]
# CSV.write(datadir("processed/raw_1d/GHCN_stations_30y.csv"), stations_inventory_valid)
CSV.write(datadir("processed/raw_1d/lnCO2.csv"), lnCO2)
```

```{julia}
using Distributions
using Plots

# Define parameters for the inverse gamma distribution
alpha = 2.0  # shape parameter (α)
beta = 1.0   # scale parameter (β)

# Create an inverse gamma distribution object
inv_gamma_dist = InverseGamma(alpha, beta)

# Generate x values for the plot
x_values = collect(range(0.01, stop=5.0, length=100))

# Calculate the PDF values for the given x values
pdf_values = pdf(inv_gamma_dist, x_values)

# Plot the PDF of the inverse gamma distribution
plot(x_values, pdf_values, xlabel="x", ylabel="Probability Density", label="Inverse Gamma Distribution", lw=2)

```
